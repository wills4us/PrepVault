# dashboard.py

import os
import pandas as pd
import streamlit as st

from my_profile import show_profile, get_user_summary, get_profile_image, show_study_plan
from resume_analyzer import show_resume_review
from notifier import check_and_generate_notifications, show_notifications
from dashboard_utils import show_profile_overview, show_progress_summary

# Trigger notification generation on dashboard load
check_and_generate_notifications()

INTERVIEW_LOG = "data/interview_scores.csv"

def show_interview_scores(username=None):
    st.subheader("🗂️ Mock Interview Feedback & Scores")

    if not os.path.exists(INTERVIEW_LOG):
        st.info("No interview scores have been saved yet.")
        return

    df = pd.read_csv(INTERVIEW_LOG)

    if username:
        df = df[df["Name"].str.lower() == username.lower()]

    if df.empty:
        st.warning("No results found for this user.")
        return

    st.dataframe(df[["Role", "Question", "Response", "Rating", "Feedback"]], use_container_width=True)

    avg_score = df["Rating"].mean().round(2)
    st.success(f"📊 Average Mock Rating: **{avg_score} / 5**")

    st.markdown("---")
    st.download_button(
        "📥 Download Your Interview Feedback",
        data=df.to_csv(index=False),
        file_name="interview_feedback.csv",
        mime="text/csv"
    )

def show_interview_summary(name_input):
    st.subheader("📝 Mock Interview Results")

    file_path = "data/interview_scores.csv"
    if not os.path.exists(file_path):
        st.info("No interview results found yet.")
        return

    df = pd.read_csv(file_path)

    if name_input:
        df = df[df["Name"].str.lower() == name_input.lower()]

    if df.empty:
        st.warning("No records found for this user.")
        return

    total_attempts = len(df)
    avg_rating = round(df["Rating"].mean(), 2)

    st.markdown(f"✅ **Total Attempts:** `{total_attempts}`")
    st.markdown(f"⭐ **Average Mock Rating:** `{avg_rating} / 5`")

    with st.expander("📋 View Detailed Feedback"):
        st.dataframe(
            df[["Role", "Question", "Response", "Feedback", "Rating"]]
            .sort_values(by="Rating", ascending=False),
            use_container_width=True
        )

def show_dashboard(name_input):
    from mock_interview import show_mock_interview  # Import inside to avoid circular dependency

    username = name_input

    # --- Sidebar ---
    st.sidebar.image("assets/logo.png", width=120)
    st.sidebar.markdown(f"👤 **{username.title()}**")
    st.sidebar.title(f"👋 Welcome, {username}")

    with st.expander("📈 Mock Interview Summary"):
        show_interview_summary(username)

    tab = st.sidebar.selectbox("Choose a tab", [
        "Profile Overview",
        "Resume Analyzer",
        "Interview Simulation",
        "Interview Summary",
        "Progress Summary",
        "Notifications",
        "Logout"
    ])

    st.title("🎓 PrepVault Dashboard")
    st.markdown("---")

    if tab == "Profile Overview":
        show_profile_overview(username)
        st.subheader("👤 Your Profile")

        col1, col2 = st.columns([1, 3])
        with col1:
            profile_img = get_profile_image(username)
            if profile_img:
                st.image(profile_img, width=100)
            else:
                st.info("No profile image uploaded yet.")

        with col2:
            summary = get_user_summary(username)
            if summary:
                st.markdown(f"💡 **AI Summary**: _{summary}_")

        st.divider()
        show_profile(username)

    elif tab == "Resume Analyzer":
        st.subheader("📄 Resume Analyzer (AI-Powered)")
        st.info("This tool uses AI to analyze your resume, suggest improvements, and auto-recommend matching job roles.")
        show_resume_review(username)

    elif tab == "Interview Simulation":
        st.subheader("🧠 AI-Powered Interview Practice")
        st.info("Answer dynamic questions generated by AI based on your resume and skills.")
        show_mock_interview(username)

    elif tab == "Interview Summary":
        show_interview_scores(username)

    elif tab == "Progress Summary":
        st.subheader("📊 Study Plan & Skill Gaps")
        st.info("This section summarizes what’s missing for your target role and suggests a custom study plan.")
        show_study_plan(username)

    elif tab == "Notifications":
        st.subheader("🔔 Notifications")
        show_notifications(username)

    elif tab == "Logout":
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.success("✅ You’ve been logged out successfully.")
        st.rerun()
