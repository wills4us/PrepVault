# dashboard.py
import pandas as pd
import os
import streamlit as st
from my_profile import show_profile, get_user_summary, get_profile_image, show_study_plan
from resume_analyzer import show_resume_review
from notifier import check_and_generate_notifications, show_notifications

# Trigger notifications when dashboard loads
check_and_generate_notifications()

INTERVIEW_LOG = "data/interview_scores.csv"

def show_interview_scores(username=None):
    st.subheader("üóÇÔ∏è Mock Interview Feedback & Scores")

    if not os.path.exists(INTERVIEW_LOG):
        st.info("No interview scores have been saved yet.")
        return

    df = pd.read_csv(INTERVIEW_LOG)

    if username:
        df = df[df["Username"].str.lower() == username.lower()]

    if df.empty:
        st.warning("No results found for this user.")
        return

    st.dataframe(df[["Timestamp", "Role", "Question", "Response", "Rating", "Feedback"]], use_container_width=True)

    avg_score = df["Rating"].mean().round(2)
    st.success(f"üìä Average Mock Rating: **{avg_score} / 5**")

    st.markdown("---")
    st.download_button("üì• Download Your Interview Feedback", data=df.to_csv(index=False), file_name="interview_feedback.csv", mime="text/csv")



def show_dashboard(name_input):
    import streamlit as st
    from resume_analyzer import show_resume_analysis
    from mock_interview import show_interview_simulator
    from dashboard_utils import show_profile_overview, show_progress_summary, show_notifications
    from dashboard import show_interview_scores  # <- Make sure this is not a circular import

    username = name_input  # Use this to personalize

    st.sidebar.image("assets/logo.png", width=120)
    st.sidebar.markdown(f"üë§ **{username.title()}**")
    st.sidebar.title(f"üëã Welcome, {username}")
    
    tab = st.sidebar.selectbox("Choose a tab", [
        "Profile Overview",
        "Resume Analyzer",
        "Interview Simulation",
        "Interview Summary",  # <-- add this
        "Progress Summary",
        "Notifications",
        "Logout"
    ])


    st.title("üéì PrepVault Dashboard")
    st.markdown("---")

    if tab == "Profile Overview":
        show_profile_overview(username)
        st.subheader("üë§ Your Profile")

        col1, col2 = st.columns([1, 3])
        with col1:
            profile_img = get_profile_image(username)
            if profile_img:
                st.image(profile_img, width=100)
            else:
                st.info("No profile image uploaded yet.")

        with col2:
            summary = get_user_summary(username)
            if summary:
                st.markdown(f"üí° **AI Summary**: _{summary}_")

        st.divider()
        show_profile(username)
        
    elif tab == "Interview Summary":
        show_interview_scores(username)

    elif tab == "Resume Analyzer":
        st.subheader("üìÑ Resume Analyzer (AI-Powered)")
        st.info("This tool uses AI to analyze your resume, suggest improvements, and auto-recommend matching job roles.")
        show_resume_review(username)

    elif tab == "Interview Simulation":
        from mock_interview import show_mock_interview  # ‚úÖ FIXED: Import inside function to avoid circular import
        st.subheader("üß† AI-Powered Interview Practice")
        st.info("Answer dynamic questions generated by AI based on your resume and skills.")
        show_mock_interview(username)

    elif tab == "Progress Summary":
        st.subheader("üìä Study Plan & Skill Gaps")
        st.info("This section summarizes what‚Äôs missing for your target role and suggests a custom study plan.")
        show_study_plan(username)

    elif tab == "Notifications":
        st.subheader("üîî Notifications")
        show_notifications(username)

    elif tab == "Logout":
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.success("‚úÖ You‚Äôve been logged out successfully.")
        st.rerun()
